# Escalonamento de tarefas
## Informações gerais
- Capítulo: [Escalonamento de tarefas](https://wiki.inf.ufpr.br/maziero/lib/exe/fetch.php?media=socm:socm-06.pdf)
- Disciplina: *sistemas operacionais*
- Livro: [Sistemas Operacionais: Conceitos e Mecanismos](https://wiki.inf.ufpr.br/maziero/doku.php?id=socm:start)
## Aluno
- nome: Felipe Gabriel Rodrigues Leal dos Santos
- matrícula: 20241014040036 
## Respostas dos exercícios
06-tarefa-escalonamento/index.md
1.
O escalonamento round-robin é um algoritmo utilizado para gerenciar a execução de processos em sistemas operacionais. Ele trabalha distribuindo o tempo da CPU de maneira igual entre todos os processos, evitando que qualquer processo monopolize o sistema. Cada processo recebe uma fatia de tempo (quantum) para executar suas tarefas. Se um processo não terminar dentro desse tempo, ele é colocado no final da fila, e o próximo processo é executado.

Exemplo: Imagine um sistema com três processos: P1, P2 e P3. O quantum de tempo é de 10 ms.

P1 começa a executar e usa 10 ms.

Após 10 ms, P1 é pausado e colocado no final da fila. P2 começa a executar.

P2 usa 10 ms e, em seguida, é pausado e colocado no final da fila. P3 começa a executar.

P3 usa 10 ms e, em seguida, é pausado e colocado no final da fila. P1 volta a executar.

Esse ciclo continua até que todos os processos sejam concluídos.

2.
Para definir a eficiência 
E
 do sistema como uma função dos parâmetros tq, ttc e p, é importante considerar o tempo total gasto no processamento real e o tempo total de troca de contexto.

A eficiência 
E
 pode ser definida como a razão entre o tempo efetivo de processamento e o tempo total gasto, considerando a troca de contexto. Vamos dividir isso em etapas:

Tempo efetivo de processamento: O tempo durante o qual a CPU está realmente processando as tarefas. Se uma tarefa usa 
p% de seu quantum tq para a entrada/saída, então o tempo efetivo de processamento é (p / 100) * tq
Tempo total: Isso inclui o tempo efetivo de processamento e o tempo de troca de contexto. O tempo de troca de contexto ocorre a cada tq. Portanto, o tempo total para um ciclo é tq + ttc.
Agora, podemos expressar a eficiência E 
como:
E = Tempo efetivo de processamento / Tempo total = (p / 100) * tq / tq + ttc
Simplificando, temos:
E = p * tq / 100 * (tq + ttc)
Isso dá uma medida de quão eficientemente o sistema está usando seu tempo de processamento, levando em consideração o impacto da troca de contexto e a porcentagem de tempo usado para tarefas de entrada/saída.

3.
A técnica de "aging" (ou envelhecimento) é um mecanismo utilizado em sistemas operacionais e em algoritmos de escalonamento de processos para evitar a fome (starvation), onde certos processos ou tarefas podem ser eternamente adiados devido à priorização de outros.

O que é e para que serve:
Propósito: O "aging" serve para aumentar a prioridade de processos que estão esperando há muito tempo na fila de espera. Assim, ele garante que todos os processos eventualmente obtenham tempo de CPU, evitando que processos de baixa prioridade nunca sejam executados.

Como funciona:
Inicialização da Prioridade: Quando um processo é inserido na fila de espera, ele começa com uma prioridade inicial.

Incremento Gradual: À medida que o processo permanece na fila de espera, sua prioridade aumenta gradualmente com o passar do tempo. Este incremento pode ser feito em intervalos regulares ou com base em um cálculo contínuo.

Execução Priorizada: Quando a prioridade do processo envelhecido se torna suficientemente alta, ele eventualmente se torna o próximo processo a ser executado, mesmo que existam processos inicialmente de maior prioridade na fila.

Exemplo Prático:
Imagine um sistema com três processos:

P1 (alta prioridade inicial)

P2 (média prioridade inicial)

P3 (baixa prioridade inicial)

Sem "aging", P1 pode monopolizar a CPU, fazendo com que P2 e P3 nunca sejam executados. Com "aging":

P2 e P3 têm suas prioridades aumentadas gradualmente enquanto esperam.

Eventualmente, a prioridade de P3 se iguala ou ultrapassa a de P1, garantindo que P3 também seja executado.

Em resumo, o "aging" é uma técnica crucial para manter a justiça e a eficiência em sistemas operacionais, garantindo que todos os processos tenham a oportunidade de serem executados e não fiquem presos indefinidamente na fila de espera.

4.
Modificações Necessárias:
Definir Prioridades Negativas:

Modificar a representação das prioridades para permitir valores negativos. Assim, ao invés de incrementar a prioridade dinâmica (pdi) com um valor positivo 
α, ela será decrementada.

Atualizar Cálculo de Prioridades:

Quando uma nova tarefa entra no sistema:
pdnova ← prioridade fixa penova

Para escolher a próxima tarefa a executar (tprox):
escolher tprox | pdprox = min(pdi)

Atualizar a prioridade dinâmica de todas as outras tarefas ao invés de incrementar com α, deve-se decrementar:
∀ti, tprox : pdi ← pdi - α

A tarefa escolhida (tprox) terá sua prioridade dinâmica ajustada de volta para o valor da prioridade estática:
pdprox ← peprox

Como Ficaria o Algoritmo:
Inicialização de nova tarefa:
penova ← prioridade fixa
pdnova ← penova

Escolha da próxima tarefa a executar:
escolher tprox | pdprox = min(pdi)

Atualização das prioridades dinâmicas:
∀ti, tprox : pdi ← pdi - α
pdprox ← peprox

Com essas modificações, o escalonamento por prioridades dinâmicas passa a suportar uma escala de prioridades negativa. Isso pode ser útil em sistemas onde se deseja que tarefas mais recentes ou com maior necessidade imediata de processamento recebam uma prioridade maior negativa (ou menor se pensamos em termos absolutos), enquanto as outras envelhecem com o tempo, ganhando prioridades mais positivas (ou menos negativas).

5.
a) FCFS Cooperativa (First-Come, First-Served)
Sequência de Execução:
t1 -> t2 -> t3 -> t4 -> t5

Gráfico de Gantt:
| t1 | t1 | t1 | t1 | t1 | t2 | t2 | t2 | t2 | t3 | t3 | t3 | t3 | t3 | t4 | t4 | t4 | t4 | t4 | t4 | t5 | t5 | t5 | t5 |
0     1     2     3     4     5    6    7    8    9    10  11  12  13  14  15  16  17  18  19  20  21  22  23

**Tempos Médios**:
- Turnaround Time (Tt): (5 + 9 + 14 + 20 + 24) / 5 = 14.4
- Waiting Time (Tw): (0 + 5 + 6 + 9 + 14) / 5 = 6.8

### b) SJF Cooperativa (Shortest Job First)
**Sequência de Execução**:

t2 -> t1 -> t5 -> t3 -> t4
**Gráfico de Gantt**:

| t2 | t2 | t2 | t2 | t1 | t1 | t1 | t1 | t1 | t5 | t5 | t5 | t5 | t3 | t3 | t3 | t3 | t3 | t4 | t4 | t4 | t4 | t4 | t4 | 
   0   1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23

Tempos Médios:

Turnaround Time (Tt): (8 + 4 + 22 + 18 + 23) / 5 = 15

Waiting Time (Tw): (3 + 0 + 17 + 13 + 17) / 5 = 10

c) SJF Preemptiva (Shortest Remaining Time First, SRTF)
Sequência de Execução:
t2 -> t1 -> t3 -> t5 -> t4

Gráfico de Gantt:
| t2 | t2 | t2 | t2 | t1 | t1 | t1 | t1 | t1 | t3 | t3 | t3 | t3 | t3 | t5 | t5 | t5 | t5 | t4 | t4 | t4 | t4 | t4 | t4 |
  0    1    2    3    4    5    6    7     8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23

**Tempos Médios**:
- Turnaround Time (Tt): (8 + 4 + 23 + 19 + 24) / 5 = 15.6
- Waiting Time (Tw): (3 + 0 + 18 + 13 + 17) / 5 = 10.2

### d) PRIO Cooperativa (Prioridade)
**Sequência de Execução**:
t4 -> t5 -> t3 -> t2 -> t1
**Gráfico de Gantt**:

| t4 | t4 | t4 | t4 | t4 | t4 | t5 | t5 | t5 | t5 | t3 | t3 | t3 | t3 | t3 | t2 | t2 | t2 | t2 | t1 | t1 | t1 | t1 | t1 | 
   0   1     2   3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23

Tempos Médios:

Turnaround Time (Tt): (20 + 14 + 23 + 22 + 23) / 5 = 20.4

Waiting Time (Tw): (14 + 10 + 17 + 18 + 18) / 5 = 15.4

e) PRIO Preemptiva (Prioridade)
Sequência de Execução:
t4 -> t5 -> t3 -> t2 -> t1

Gráfico de Gantt:
| t4 | t4 | t4 | t4 | t4 | t4 | t5 | t5 | t5 | t5 | t3 | t3 | t3 | t3 | t3 | t2 | t2 | t2 | t2 | t1 | t1 | t1 | t1 | t1 |
   0    1    2   3     4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23

**Tempos Médios**:
- Turnaround Time (Tt): (20 + 14 + 23 + 22 + 23) / 5 = 20.4
- Waiting Time (Tw): (14 + 10 + 17 + 18 + 18) / 5 = 15.4

### f) RR com tq = 2 (Round Robin sem Envelhecimento)
**Sequência de Execução**:
t1 -> t2 -> t1 -> t2 -> t3 -> t1 -> t4 -> t1 -> t4 -> t3 -> t5 -> t4 -> t5 -> t3 -> t5 -> t4

**Gráfico de Gantt**:
| t1 | t2 | t1 | t2 | t3 | t1 | t4 | t1 | t4 | t3 | t5 | t4 | t5 | t3 | t5 | t4 | 
  0    2     4   6     8   10   12   14   16   18   20   22   24   26   28   30  32 34 36 38 40 42 44 46 48

Tempos Médios:

Turnaround Time (Tt): (14 + 16 + 34 + 46 + 48) / 5 = 31.6

Waiting Time (Tw): (10 + 12 + 29 + 40 + 44) / 5 = 27

6.
Tabela de Tarefas
Tarefa: t1, t2, t3, t4, t5

Ingresso: 0, 0, 1, 7, 11

Duração: 5, 6, 2, 6, 4

Prioridade: 2, 3, 4, 7, 9

a) FCFS Cooperativa (First-Come, First-Served)
Sequência de Execução:


t1 -> t2 -> t3 -> t4 -> t5
Gráfico de Gantt:

| t1 | t1 | t1 | t1 | t1 | t2 | t2 | t2 | t2 | t2 | t2 | t3 | t3 | t4 | t4 | t4 | t4 | t4 | t4 | t5 | t5 | t5 | t5 |
   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22  23

**Tempos Médios**:
- Turnaround Time (Tt): (5 + 11 + 12 + 22 + 26) / 5 = 15.2
- Waiting Time (Tw): (0 + 5 + 10 + 15 + 18) / 5 = 9.6

### b) SJF Cooperativa (Shortest Job First)
**Sequência de Execução**:
t3 -> t1 -> t2 -> t5 -> t4


**Gráfico de Gantt**:
| t3 | t3 | t1 | t1 | t1 | t1 | t1 | t2 | t2 | t2 | t2 | t2 | t2 | t5 | t5 | t5 | t5 | t4 | t4 | t4 | t4 | t4 | t4 | 
   0   1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23

Tempos Médios:

Turnaround Time (Tt): (7 + 12 + 4 + 19 + 23) / 5 = 13

Waiting Time (Tw): (2 + 7 + 1 + 10 + 15) / 5 = 7

c) SJF Preemptiva (Shortest Remaining Time First, SRTF)
Sequência de Execução:


t3 -> t1 -> t2 -> t5 -> t4
Gráfico de Gantt:


| t3 | t3 | t1 | t1 | t1 | t1 | t1 | t2 | t2 | t2 | t2 | t2 | t2 | t5 | t5 | t5 | t5 | t4 | t4 | t4 | t4 | t4 | t4 |
   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22  23

**Tempos Médios**:
- Turnaround Time (Tt): (7 + 12 + 4 + 19 + 23) / 5 = 13
- Waiting Time (Tw): (2 + 7 + 1 + 10 + 15) / 5 = 7

### d) PRIO Cooperativa (Prioridade)
**Sequência de Execução**:
t5 -> t4 -> t3 -> t2 -> t1


**Gráfico de Gantt**:
| t5 | t5 | t5 | t5 | t4 | t4 | t4 | t4 | t4 | t4 | t3 | t3 | t2 | t2 | t2 | t2 | t2 | t2 | t1 | t1 | t1 | t1 | t1 |
   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22  23

Tempos Médios:

Turnaround Time (Tt): (18 + 17 + 12 + 11 + 9) / 5 = 13.4

Waiting Time (Tw): (14 + 11 + 10 + 7 + 5) / 5 = 9.4

e) PRIO Preemptiva (Prioridade)
Sequência de Execução:

t5 -> t4 -> t3 -> t2 -> t1
Gráfico de Gantt:


| t5 | t5 | t5 | t5 | t4 | t4 | t4 | t4 | t4 | t4 | t3 | t3 | t2 | t2 | t2 | t2 | t2 | t2 | t1 | t1 | t1 | t1 | t1 |
   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22  23

**Tempos Médios**:
- Turnaround Time (Tt): (18 + 17 + 12 + 11 + 9) / 5 = 13.4
- Waiting Time (Tw): (14 + 11 + 10 + 7 + 5) / 5 = 9.4

### f) RR com tq = 2 (Round Robin sem Envelhecimento)
**Sequência de Execução**:
t1 -> t2 -> t3 -> t4 -> t5


**Gráfico de Gantt**:
| t1 | t2 | t1 | t2 | t3 | t4 | t5 | t4 | t5 | t3 | t1 | t2 | t4 | t5 |
  0    2     4   6    8    10   12   14   16   18   20   22   24   26   28   30

Tempos Médios:

Turnaround Time (Tt): (14 + 16 + 22 + 24 + 26) / 5 = 20.4

Waiting Time (Tw): (10 + 12 + 18 + 20 + 22) / 5 = 16.4










